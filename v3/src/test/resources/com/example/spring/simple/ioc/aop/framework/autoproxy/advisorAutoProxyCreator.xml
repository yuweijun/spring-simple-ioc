<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC  "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
	Common bean definitions for EnterpriseServices
	tests.
-->
<beans>

	<description>
		Matches all Advisors in the factory: we don't use a prefix
	</description>

	<bean id="aapc"
		class="com.example.spring.simple.ioc.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
	</bean>
	
	<!--
		Depending on the order value, these beans should appear
		before or after the transaction advisor. Thus we configure
		them to check for or to refuse to accept a transaction.
		The transaction advisor's order value is 10.
	-->
	<bean id="orderedBeforeTransaction"
		class="com.example.spring.simple.ioc.aop.framework.autoproxy.OrderedTxCheckAdvisor">
		<property name="order"><value>9</value></property>
		<property name="requireTransactionContext"><value>false</value></property>
	</bean>
	
	<bean id="orderedAfterTransaction"
		class="com.example.spring.simple.ioc.aop.framework.autoproxy.OrderedTxCheckAdvisor">
		<property name="order"><value>11</value></property>
		<property name="requireTransactionContext"><value>true</value></property>
	</bean>
	
	<bean id="orderedAfterTransaction2"
		class="com.example.spring.simple.ioc.aop.framework.autoproxy.OrderedTxCheckAdvisor">
		<!-- Don't set order value: should remain Integer.MAX_VALUE,
		so it's non-ordered -->
		<property name="requireTransactionContext"><value>true</value></property>
	</bean>


	<!--
		Often we can leave the definition of such infrastructural beans to
		child factories
	-->
	<bean id="txManager"
		class="com.example.spring.simple.ioc.transaction.CountingTxManager">
	</bean>
	
	<bean id="tas" class="com.example.spring.simple.ioc.transaction.interceptor.NameMatchTransactionAttributeSource">
		<property name="properties">
			<props>
				<prop key="set*">PROPAGATION_REQUIRED</prop>
				<prop key="rollbackOnly">PROPAGATION_REQUIRED</prop>
				<prop key="echoException">PROPAGATION_REQUIRED,+javax.servlet.ServletException,-java.lang.Exception</prop>
			</props>
		</property>
	</bean>
	
	
	<bean id="txInterceptor" class="com.example.spring.simple.ioc.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager"><ref local="txManager"/></property>
		<property name="transactionAttributeSource"><ref local="tas"/></property>
	</bean>
	
	
	<bean id="txAdvisor"
		autowire="constructor"
		class="com.example.spring.simple.ioc.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="order"><value>10</value></property>
	</bean>
	
	
	<!-- ====== Test for prototype definitions to try to provoke circular references ========================= -->
	<!--
		This advisor should never match and should not change how any of the tests run,
		but it's a prototype referencing another (unused) prototype, as well as a
		singleton, so it may pose circular reference problems, or
		an infinite loop.
	-->
	<bean id="neverMatchAdvisor" 
		class="com.example.spring.simple.ioc.aop.framework.autoproxy.NeverMatchAdvisor"
		singleton="false"
	>
		<property name="dependencies">
			<list>
				<ref local="singletonDependency" />
				<ref local="prototypeDependency" />
			</list>
		</property>
	</bean>
	
	<!-- These two beans would otherwise be eligible for autoproxying -->
	
	<bean id="singletonDependency" class="com.example.spring.simple.ioc.beans.TestBean"
		singleton="true" />
		
	<bean id="prototypeDependency" class="com.example.spring.simple.ioc.beans.TestBean"
		singleton="false" />
	
	
	<!-- ====== End test for prototype definitions to try to provoke circular references ========================= -->
	
	<bean id="test"
		class="com.example.spring.simple.ioc.beans.TestBean">
		<property name="age"><value>4</value></property>
	</bean>
	
	<bean id="noSetters"
		class="com.example.spring.simple.ioc.aop.framework.autoproxy.NoSetters">

	</bean>
	
	<bean id="rollback"
		class="com.example.spring.simple.ioc.aop.framework.autoproxy.Rollback">

	</bean>
	

</beans>		
	
	